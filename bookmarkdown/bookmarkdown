#!/usr/bin/env python

# {{{
import os, shutil
import baker
import markdown
from jinja2 import Environment, PackageLoader

env = Environment(loader=PackageLoader('bookmarkdown', 'templates'))
join = os.path.join
# }}}

# Utilities ------------------------------------------------------------------------
def mkdirs(path):
    def _md(acc, next):
        target = join(acc, next)
        os.path.exists(target) or os.mkdir(target)
        return target
    reduce(_md, os.path.split(path), '')


# Guts -----------------------------------------------------------------------------
def _build_html_file(filename, template, context={}):
    source = '%s.markdown' % filename

    if not os.path.exists(source):
        return

    with open(source, 'r') as f:
        content = markdown.markdown(f.read())

    out = env.get_template('%s.html' % template).render(content=content, **context)
    target = join('build', 'html', '%s.html' % filename)

    with open(target, 'w') as f:
        f.write(out)

def _build_index_file():
    source = 'introduction.markdown'

    if not os.path.exists(source):
        return

    with open(source, 'r') as f:
        content = markdown.markdown(f.read())

    out = env.get_template('splash.html').render(content=content)
    target = join('build', 'html', 'index.html')

    with open(target, 'w') as f:
        f.write(out)


def _copy_static():
    import bookmarkdown as ugly_hack

    static_src = join(os.path.dirname(ugly_hack.__file__), 'static')
    static_dest = join('build', 'html', 'static')

    if os.path.exists(static_dest):
        shutil.rmtree(static_dest)

    shutil.copytree(static_src, static_dest)

def _build_html():
    mkdirs(join('build', 'html', 'chapters'))

    _copy_static()

    _build_index_file()
    _build_html_file('acknowledgements', 'single')
    _build_html_file('license', 'single')
    _build_html_file('preface', 'single')

    for filename in os.listdir('chapters'):
        if filename.endswith('.markdown'):
            _build_html_file(join('chapters', filename.rsplit('.')[0]), 'chapter')

def _build_pdf():
    mkdirs(join('build', 'pdf'))


# Commands -------------------------------------------------------------------------
@baker.command
def pdf():
    '''Build the PDF version of the book.'''
    _build_pdf()

@baker.command
def html():
    '''Build the HTML version of the book.'''
    _build_html()

@baker.command
def build():
    '''Build all versions of the book.'''
    _build_html()
    _build_pdf()

@baker.command
def serve(address='127.0.0.1', port=8000):
    '''Serve the rendered book with a local webserver.

    :param address: The address to bind the server to (default: 127.0.0.1)
    :param port: The port to bind the server to (default: 8000)

    '''
    import SimpleHTTPServer, SocketServer

    os.chdir(join('build', 'html'))
    server = SocketServer.TCPServer((address, port),
                                    SimpleHTTPServer.SimpleHTTPRequestHandler)

    print "Serving book at http://%s:%d" % (address, port)
    server.serve_forever()

@baker.command
def watch():
    '''Watch the source files and rebuild the book when changed.'''
    pass


# Entry ----------------------------------------------------------------------------
if __name__ == '__main__':
    baker.run()
